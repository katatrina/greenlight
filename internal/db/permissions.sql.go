// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permissions.sql

package db

import (
	"context"
)

const addPermissionsForUser = `-- name: AddPermissionsForUser :exec
INSERT INTO users_permissions (user_id, permission_id)
SELECT $1::bigint, permissions.id FROM permissions
    WHERE permissions.code = ANY($2::text[])
`

type AddPermissionsForUserParams struct {
	UserID          int64    `json:"user_id"`
	PermissionCodes []string `json:"permission_codes"`
}

func (q *Queries) AddPermissionsForUser(ctx context.Context, arg AddPermissionsForUserParams) error {
	_, err := q.db.Exec(ctx, addPermissionsForUser, arg.UserID, arg.PermissionCodes)
	return err
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT permissions.code
FROM users
INNER JOIN users_permissions ON users.id = users_permissions.user_id
INNER JOIN permissions ON users_permissions.permission_id = permissions.id
WHERE users.id = $1
`

func (q *Queries) GetUserPermissions(ctx context.Context, id int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserPermissions, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
