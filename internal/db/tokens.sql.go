// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package db

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (user_id, hash, scope, expired_at)
VALUES ($1, $2, $3, $4) RETURNING user_id, hash, scope, expired_at, created_at
`

type CreateTokenParams struct {
	UserID    int64     `json:"user_id"`
	Hash      []byte    `json:"hash"`
	Scope     string    `json:"scope"`
	ExpiredAt time.Time `json:"expired_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.UserID,
		arg.Hash,
		arg.Scope,
		arg.ExpiredAt,
	)
	var i Token
	err := row.Scan(
		&i.UserID,
		&i.Hash,
		&i.Scope,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserTokens = `-- name: DeleteUserTokens :exec
DELETE FROM tokens
WHERE user_id = $1 AND scope = $2
`

type DeleteUserTokensParams struct {
	UserID int64  `json:"user_id"`
	Scope  string `json:"scope"`
}

func (q *Queries) DeleteUserTokens(ctx context.Context, arg DeleteUserTokensParams) error {
	_, err := q.db.Exec(ctx, deleteUserTokens, arg.UserID, arg.Scope)
	return err
}
