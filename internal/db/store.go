package db

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5/pgxpool"
)

// Store defines all functions to execute db queries and transactions.
type Store interface {
	Querier
	GenerateToken(ctx context.Context, arg GenerateTokenParams) (tokenPlaintext string, token Token, err error)
	RegisterUserTx(ctx context.Context, arg RegisterUserTxParams) (User, error)
	ActivateUserTx(ctx context.Context, arg ActivateUserParams) (User, error)
	ResetUserPasswordTx(ctx context.Context, arg ResetUserPasswordTxParams) error
}

// SQLStore is the implementation of the Store interface.
type SQLStore struct {
	*Queries
	connPool *pgxpool.Pool
}

// NewStore returns a new Store.
func NewStore(connPool *pgxpool.Pool) Store {
	return &SQLStore{
		Queries:  New(connPool), // Queries is just used to execute a single query.
		connPool: connPool,      // This field is used to extend the functionality - begin transactions.
	}
}

// execTx executes a series of queries provided by fn param within a database transaction.
func (store *SQLStore) execTx(ctx context.Context, fn func(*Queries) error) error {
	// Begin a new transaction.
	tx, err := store.connPool.Begin(ctx)
	if err != nil {
		return err
	}

	// Wrap the transaction object in a new *Queries.
	// This allows us to reuse the existing query methods that defined on *Queries, generated by sqlc.
	qtx := store.WithTx(tx)

	// Execute the transaction queries provided by the caller of execTx.
	err = fn(qtx)
	if err != nil {
		// If an error occurs, rollback the transaction.
		if rbErr := tx.Rollback(ctx); rbErr != nil {
			return fmt.Errorf("tx error: %v, rb error: %v", err, rbErr)
		}

		return err
	}

	// If no error occurs, commit the transaction.
	return tx.Commit(ctx)
}
